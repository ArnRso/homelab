version: "3.9"
networks:
  default:
    # name: nginx-network
    name: traefik
    external: true
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID
x-common-keys-core: &common-keys-core
  security_opt:
    - no-new-privileges:true
  restart: always
x-common-keys-apps: &common-keys-apps
  security_opt:
    - no-new-privileges:true
  restart: always
x-common-keys-media: &common-keys-media
  security_opt:
    - no-new-privileges:true
  restart: always

services:
  portainer:
    <<: *common-keys-core
    container_name: portainer
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/appdata/portainer/data:/data
    environment:
      - TZ=$TZ
    labels:
      - traefik.enable=true
      # - traefik.http.middlewares.admin.basicauth.users=${HTTP_BASIC_USER}:${HTTP_BASIC_PWD}
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      - traefik.http.routers.portainer.service=portainer
      # - traefik.http.routers.portainer.middlewares=admin
      - traefik.http.routers.portainer.tls.certresolver=letsencryptresolver

  heimdall:
    <<: *common-keys-core
    image: lscr.io/linuxserver/heimdall
    container_name: heimdall
    volumes:
      - $DOCKERDIR/appdata/heimdall:/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - traefik.enable=true
      # - traefik.http.middlewares.heimdall-auth.basicauth.users=${HTTP_BASIC_USER}:${HTTP_BASIC_PWD}
      - traefik.http.routers.heimdall.entrypoints=websecure
      - traefik.http.routers.heimdall.rule=Host(`heimdall.${DOMAIN}`)
      - traefik.http.routers.heimdall.service=heimdall
      # - traefik.http.routers.heimdall.middlewares=admin
      - traefik.http.routers.heimdall.tls.certresolver=letsencryptresolver

  qbittorrent:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    volumes:
      - $DOCKERDIR/appdata/qbittorrent:/config
      - $DATADIR/$DOWNLOADS_FOLDER:/data/downloads
      - $USERDIR:/data
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 2
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${DOMAIN}`)
      - traefik.http.routers.qbittorrent.service=qbittorrent
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080
      - traefik.http.routers.qbittorrent.tls.certresolver=letsencryptresolver

  prowlarr:
    <<: *common-keys-apps
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    volumes:
      - $DOCKERDIR/appdata/prowlarr:/config
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.entrypoints=websecure
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)
      - traefik.http.routers.prowlarr.service=prowlarr
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      - traefik.http.routers.prowlarr.tls.certresolver=letsencryptresolver

  radarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/radarr:nightly
    container_name: radarr
    volumes:
      - $DOCKERDIR/appdata/radarr:/config
      - $DATADIR/temp/appdata/radarr/MediaCover:/config/MediaCover
      - $DATADIR:/data
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)
      - traefik.http.routers.radarr.service=radarr
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - traefik.http.routers.radarr.tls.certresolver=letsencryptresolver

  sonarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    volumes:
      - $DOCKERDIR/appdata/sonarr:/config
      - $DATADIR/temp/appdata/sonarr/MediaCover:/config/MediaCover
      - $DATADIR:/data
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)
      - traefik.http.routers.sonarr.service=sonarr
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr.tls.certresolver=letsencryptresolver

  readarr:
    <<: *common-keys-media
    image: hotio/readarr:nightly
    container_name: readarr
    volumes:
      - $DOCKERDIR/appdata/readarr:/config
      - $DATADIR:/data
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
      UMASK: 2
    labels:
      - traefik.enable=true
      - traefik.http.routers.readarr.entrypoints=websecure
      - traefik.http.routers.readarr.rule=Host(`readarr.${DOMAIN}`)
      - traefik.http.routers.readarr.service=readarr
      - traefik.http.services.readarr.loadbalancer.server.port=8787
      - traefik.http.routers.readarr.tls.certresolver=letsencryptresolver

  glances:
    <<: *common-keys-apps
    image: nicolargo/glances:latest
    container_name: glances
    pid: host
    volumes:
      - $DOCKERDIR/appdata/glances/glances.conf:/glances/conf/glances.conf
      - $USERDIR:/data/home:ro
      - /media/data:/data/data:ro
    environment:
      # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
      # GLANCES_OPT: "--export influxdb"
      GLANCES_OPT: "-w"
      DOCKER_HOST: unix:///var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.routers.glances.entrypoints=websecure
      - traefik.http.routers.glances.rule=Host(`glances.${DOMAIN}`)
      - traefik.http.routers.glances.service=glances
      - traefik.http.services.glances.loadbalancer.server.port=61208
      - traefik.http.routers.glances.tls.certresolver=letsencryptresolver

  dozzle:
    <<: *common-keys-apps
    image: amir20/dozzle:latest
    container_name: dozzle
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.dozzle.entrypoints=websecure
      - traefik.http.routers.dozzle.rule=Host(`dozzle.${DOMAIN}`)
      - traefik.http.routers.dozzle.service=dozzle
      - traefik.http.services.dozzle.loadbalancer.server.port=8080
      - traefik.http.routers.dozzle.tls.certresolver=letsencryptresolver

  filebrowser:
    <<: *common-keys-core
    image: filebrowser/filebrowser
    container_name: filebrowser
    volumes:
      - $DOCKERDIR/appdata/filebrowser:/config
      - /media:/data/media
      - $USERDIR:/srv
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - traefik.enable=true
      - traefik.http.routers.filebrowser.entrypoints=websecure
      - traefik.http.routers.filebrowser.rule=Host(`filebrowser.${DOMAIN}`)
      - traefik.http.routers.filebrowser.service=filebrowser
      - traefik.http.services.filebrowser.loadbalancer.server.port=80
      - traefik.http.routers.filebrowser.tls.certresolver=letsencryptresolver

  # speedtest-tracker:
  #   <<: *common-keys-core # See EXTENSION FIELDS at the top
  #   container_name: speedtest-tracker
  #   image: 'ghcr.io/alexjustesen/speedtest-tracker:latest'
  #   volumes:
  #     - '$DOCKERDIR/appdata/speedtest-tracker:/config'
  #   environment:
  #     <<: *default-tz-puid-pgid

  whoami:
    image: "traefik/whoami"
    container_name: whoami
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.entrypoints=websecure
      - traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN}`)
      - traefik.http.routers.whoami.service=whoami
      - traefik.http.services.whoami.loadbalancer.server.port=80
      - traefik.http.routers.whoami.tls.certresolver=letsencryptresolver

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    container_name: watchtower
    restart: always

  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $DOCKERDIR/appdata/jackett:/config
      - $DATADIR/$DOWNLOADS_FOLDER:/downloads
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.jackett.entrypoints=websecure
      - traefik.http.routers.jackett.rule=Host(`jackett.${DOMAIN}`)
      - traefik.http.routers.jackett.service=jackett
      - traefik.http.services.jackett.loadbalancer.server.port=9117
      - traefik.http.routers.jackett.tls.certresolver=letsencryptresolver

  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=Europe/Paris
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.flaresolverr.entrypoints=websecure
      - traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.${DOMAIN}`)
      - traefik.http.routers.flaresolverr.service=flaresolverr
      - traefik.http.services.flaresolverr.loadbalancer.server.port=8191
      - traefik.http.routers.flaresolverr.tls.certresolver=letsencryptresolver

  uptime-kuma:
    image: louislam/uptime-kuma
    container_name: uptime-kuma
    volumes:
      - $DOCKERDIR/appdata/uptime-kuma-data:/app/data
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.uptime-kuma.entrypoints=websecure
      - traefik.http.routers.uptime-kuma.rule=Host(`uptime-kuma.${DOMAIN}`)
      - traefik.http.routers.uptime-kuma.service=uptime-kuma
      - traefik.http.services.uptime-kuma.loadbalancer.server.port=3001
      - traefik.http.routers.uptime-kuma.tls.certresolver=letsencryptresolver

  # sabnzbd:
  #   image: lscr.io/linuxserver/sabnzbd:latest
  #   container_name: sabnzbd
  #   environment:
  #     <<: *default-tz-puid-pgid
  #   volumes:
  #     - $DOCKERDIR/appdata/sabnzbd:/config
  #     - $DATADIR/$DOWNLOADS_FOLDER:/downloads #optional
  #     - $DATADIR/$DOWNLOADS_FOLDER/incomplete:/incomplete-downloads #optional
  #   restart: always

  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - $DOCKERDIR/appdata/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    restart: always
    privileged: true
    network_mode: host
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - traefik.enable=true
      - traefik.http.routers.homeassistant.entrypoints=websecure
      - traefik.http.routers.homeassistant.rule=Host(`homeassistant.${DOMAIN}`)
      - traefik.http.routers.homeassistant.service=homeassistant
      - traefik.http.services.homeassistant.loadbalancer.server.port=8123
      - traefik.http.routers.homeassistant.tls.certresolver=letsencryptresolver

  onlyfood:
    build: "./dockerfiles/php8-1-apache"
    restart: "on-failure"
    container_name: "onlyfood"
    volumes:
      - "$DOCKERDIR/appdata/onlyfood:/var/www/html"
      - "$DOCKERDIR/conf/php8-1/ini/php.ini:/usr/local/etc/php/php.ini"
      - "$DOCKERDIR/conf/vhost/vhost.conf:/etc/apache2/sites-enabled/000-default.conf"
    labels:
      - traefik.enable=true
      - traefik.http.routers.onlyfood.entrypoints=websecure
      - traefik.http.routers.onlyfood.rule=Host(`onlyfood.${DOMAIN}`)
      - traefik.http.routers.onlyfood.service=onlyfood
      - traefik.http.services.onlyfood.loadbalancer.server.port=80
      - traefik.http.routers.onlyfood.tls.certresolver=letsencryptresolver

  mailer:
    container_name: mailer
    image: schickling/mailcatcher
    labels:
      - traefik.enable=true
      - traefik.http.routers.mailer.entrypoints=websecure
      - traefik.http.routers.mailer.rule=Host(`mailer.${DOMAIN}`)
      - traefik.http.routers.mailer.service=mailer
      - traefik.http.services.mailer.loadbalancer.server.port=1080
      - traefik.http.routers.mailer.tls.certresolver=letsencryptresolver

  database:
    image: postgres:13-alpine
    container_name: onlyfood-db
    environment:
      POSTGRES_DB: app
      POSTGRES_PASSWORD: ChangeMe
      POSTGRES_USER: symfony
    volumes:
      - $DOCKERDIR/appdata/onlyfooddb:/var/lib/postgresql/data:rw
  # nextcloud:
  #   image: lscr.io/linuxserver/nextcloud:latest
  #   container_name: nextcloud
  #   environment:
  #     <<: *default-tz-puid-pgid
  #   volumes:
  #     - $DOCKERDIR/appdata/homeassistant/config:/config
  #     - $DOCKERDIR/appdata/homeassistant/data:/data
  #     - $DATADIR:/datadir
  #   restart: always

  # grocy:
  #   image: lscr.io/linuxserver/grocy:v4.0.3-ls215
  #   container_name: grocy
  #   volumes:
  #     - $DOCKERDIR/appdata/grocy/config:/config
  #   restart: unless-stopped
  #   environment:
  #     <<: *default-tz-puid-pgid

  # hammond:
  #   container_name: hammond
  #   image: alfhou/hammond:v0.0.21
  #   volumes:
  #     - $DOCKERDIR/appdata/hammond/config:/config
  #     - $DOCKERDIR/appdata/hammond/assets:/assets
  #     - /etc/timezone:/etc/timezone
  #     - /etc/localtime:/etc/localtime
  #   environment:
  #     <<: *default-tz-puid-pgid
  #   restart: unless-stopped

  # proxitok:
  #   container_name: proxitok
  #   image: ghcr.io/pablouser1/proxitok:master
  #   restart: unless-stopped
  #   environment:
  #     - "LATTE_CACHE=/cache"
  #     - "API_CACHE=redis"
  #     - "REDIS_HOST=proxitok-redis"
  #     - "REDIS_PORT=6379"
  #     - "API_SIGNER=remote"
  #     - "API_SIGNER_URL=http://proxitok-signer:8080/signature"
  #   volumes:
  #     - "proxitok-cache:/cache"
  #   depends_on:
  #     - proxitok-redis
  #     - proxitok-signer
  # proxitok-redis:
  #   container_name: proxitok-redis
  #   image: redis:7-alpine
  #   restart: unless-stopped
  #   command: redis-server --save 60 1 --loglevel warning
  # proxitok-signer:
  #   container_name: proxitok-signer
  #   image: ghcr.io/pablouser1/signtok:master
